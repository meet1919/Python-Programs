# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Meet\Desktop\UI Converter\Final.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(677, 426)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            "C:\\Users\\Meet\\Desktop\\UI Converter\\../../PycharmProjects/untitled/Internshala/Final Project/All.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)

        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("QMainWindow{\n"
"background-color: rgb(200, 200, 200);\n"
"}")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(38, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.Batsman = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Batsman.sizePolicy().hasHeightForWidth())
        self.Batsman.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Batsman.setFont(font)
        self.Batsman.setWordWrap(False)
        self.Batsman.setObjectName("Batsman")
        self.horizontalLayout_4.addWidget(self.Batsman)
        self.BATS = QtWidgets.QLineEdit(self.centralwidget)
        self.BATS.setAlignment(QtCore.Qt.AlignCenter)
        self.BATS.setReadOnly(True)
        self.BATS.setObjectName("BATS")
        self.horizontalLayout_4.addWidget(self.BATS)
        self.Bowler = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bowler.setFont(font)
        self.Bowler.setObjectName("Bowler")
        self.horizontalLayout_4.addWidget(self.Bowler)
        self.BOWS = QtWidgets.QLineEdit(self.centralwidget)
        self.BOWS.setAlignment(QtCore.Qt.AlignCenter)
        self.BOWS.setReadOnly(True)
        self.BOWS.setObjectName("BOWS")
        self.horizontalLayout_4.addWidget(self.BOWS)
        self.Allrounder = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Allrounder.setFont(font)
        self.Allrounder.setObjectName("Allrounder")
        self.horizontalLayout_4.addWidget(self.Allrounder)
        self.ARS = QtWidgets.QLineEdit(self.centralwidget)
        self.ARS.setAlignment(QtCore.Qt.AlignCenter)
        self.ARS.setReadOnly(True)
        self.ARS.setObjectName("ARS")
        self.horizontalLayout_4.addWidget(self.ARS)
        self.Wicket_keeper = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Wicket_keeper.setFont(font)
        self.Wicket_keeper.setObjectName("Wicket_keeper")
        self.horizontalLayout_4.addWidget(self.Wicket_keeper)
        self.WKS = QtWidgets.QLineEdit(self.centralwidget)
        self.WKS.setAlignment(QtCore.Qt.AlignCenter)
        self.WKS.setReadOnly(True)
        self.WKS.setObjectName("WKS")
        self.horizontalLayout_4.addWidget(self.WKS)
        spacerItem1 = QtWidgets.QSpacerItem(38, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        self.line = QtWidgets.QFrame(MainWindow)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem2 = QtWidgets.QSpacerItem(68, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.PointsA = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PointsA.setFont(font)
        self.PointsA.setObjectName("PointsA")
        self.horizontalLayout_3.addWidget(self.PointsA)
        self.ShowPA = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ShowPA.setFont(font)
        self.ShowPA.setWordWrap(False)
        self.ShowPA.setObjectName("ShowPA")
        self.horizontalLayout_3.addWidget(self.ShowPA)
        spacerItem3 = QtWidgets.QSpacerItem(188, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.PointsU = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PointsU.setFont(font)
        self.PointsU.setObjectName("PointsU")
        self.horizontalLayout_3.addWidget(self.PointsU)
        self.ShowPU = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ShowPU.sizePolicy().hasHeightForWidth())
        self.ShowPU.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ShowPU.setFont(font)
        self.ShowPU.setObjectName("ShowPU")
        self.horizontalLayout_3.addWidget(self.ShowPU)
        spacerItem4 = QtWidgets.QSpacerItem(188, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem5 = QtWidgets.QSpacerItem(48, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)

        self.listWidget.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.listWidget.setFrameShadow(QtWidgets.QFrame.Sunken)

        self.listWidget.setObjectName("listWidget")

        self.listWidget.itemDoubleClicked.connect(self.remove_listwidget)

        self.horizontalLayout.addWidget(self.listWidget)
        spacerItem6 = QtWidgets.QSpacerItem(38, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)

        self.listWidget_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.listWidget_2.setFrameShadow(QtWidgets.QFrame.Sunken)

        self.listWidget_2.setObjectName("listWidget_2")

        self.listWidget_2.itemDoubleClicked.connect(self.remove_listwidget2)

        self.horizontalLayout.addWidget(self.listWidget_2)
        spacerItem7 = QtWidgets.QSpacerItem(48, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem8 = QtWidgets.QSpacerItem(68, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.Bat = QtWidgets.QRadioButton(self.centralwidget)
        self.Bat.setObjectName("Bat")

        self.Bat.toggled.connect(self.category)

        self.horizontalLayout_2.addWidget(self.Bat)
        self.Bow = QtWidgets.QRadioButton(self.centralwidget)
        self.Bow.setObjectName("Bow")

        self.Bow.toggled.connect(self.category)

        self.horizontalLayout_2.addWidget(self.Bow)
        self.AllRound = QtWidgets.QRadioButton(self.centralwidget)
        self.AllRound.setObjectName("AllRound")

        self.AllRound.toggled.connect(self.category)

        self.horizontalLayout_2.addWidget(self.AllRound)
        self.WicketK = QtWidgets.QRadioButton(self.centralwidget)
        self.WicketK.setObjectName("WicketK")

        self.WicketK.toggled.connect(self.category)

        self.horizontalLayout_2.addWidget(self.WicketK)
        spacerItem9 = QtWidgets.QSpacerItem(108, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        self.TeamN = QtWidgets.QLabel(self.centralwidget)
        self.TeamN.setObjectName("TeamN")
        self.horizontalLayout_2.addWidget(self.TeamN)
        self.TeamName = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.TeamName.setFont(font)
        self.TeamName.setObjectName("TeamName")
        self.horizontalLayout_2.addWidget(self.TeamName)
        spacerItem10 = QtWidgets.QSpacerItem(58, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.listWidget_2.raise_()
        self.listWidget.raise_()
        self.listWidget_2.raise_()
        self.Bat.raise_()
        self.Bow.raise_()
        self.AllRound.raise_()
        self.WicketK.raise_()
        self.PointsA.raise_()
        self.PointsU.raise_()
        self.ShowPA.raise_()
        self.ShowPU.raise_()
        self.Batsman.raise_()
        self.Bowler.raise_()
        self.Allrounder.raise_()
        self.TeamN.raise_()
        self.TeamName.raise_()
        self.Wicket_keeper.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 677, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")

        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("C:\\Users\\Meet\\Desktop\\UI Converter\\../../PycharmProjects/untitled/Internshala/Final Project/save.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.actionSAVE_Team.setIcon(icon1)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.actionRules = QtWidgets.QAction(MainWindow)
        self.actionRules.setObjectName("actionRules")
        self.actionInstructions = QtWidgets.QAction(MainWindow)
        self.actionInstructions.setObjectName("actionInstructions")

        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menuHelp.addAction(self.actionRules)
        self.menuHelp.addAction(self.actionInstructions)
        self.menubar.addAction(self.menuManage_Teams.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuManage_Teams.triggered[QtWidgets.QAction].connect(self.menu)
        self.menuHelp.triggered[QtWidgets.QAction].connect(self.menu)

        self.bat = 0
        self.bwl = 0
        self.ar = 0
        self.wk = 0
        self.avl = 1000
        self.used = 0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket League"))
        self.Batsman.setText(_translate("MainWindow", "Batsman (BAT)"))

        self.Bowler.setText(_translate("MainWindow", "Bowlers (BOW)"))

        self.Allrounder.setText(_translate("MainWindow", "Allrouders (AR)"))

        self.Wicket_keeper.setText(_translate("MainWindow", "Wicket Keeper (WK)"))

        self.PointsA.setText(_translate("MainWindow", "        Points Available:"))
        self.ShowPA.setText(_translate("MainWindow", "1000"))
        self.PointsU.setText(_translate("MainWindow", "Points Used:"))
        self.ShowPU.setText(_translate("MainWindow", "0"))
        self.Bat.setText(_translate("MainWindow", "BAT"))
        self.Bow.setText(_translate("MainWindow", "BOW"))
        self.AllRound.setText(_translate("MainWindow", "AR"))
        self.WicketK.setText(_translate("MainWindow", "WK"))
        self.TeamN.setText(_translate("MainWindow", "Team Name"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionNEW_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionOPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionSAVE_Team.setToolTip(_translate("MainWindow", "SAVE Team"))
        self.actionSAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionRules.setText(_translate("MainWindow", "Rules"))
        self.actionInstructions.setText(_translate("MainWindow", "Instructions"))

    def menu(self, action):
        txt = action.text()

        if txt == "NEW Team":
            MainWindow = QtWidgets.QMainWindow()
            self.bat = 0
            self.bwl = 0
            self.ar = 0
            self.wk = 0
            self.avl = 1000
            self.used = 0
            self.listWidget.clear()
            self.listWidget_2.clear()
            self.TeamName.setText("...")
            self.showstatus()
            text, ok = QtWidgets.QInputDialog.getText(MainWindow, 'New Team', 'Enter name of team:')
            if ok:
                self.TeamName.setText(str(text))

        if txt == "OPEN Team":

            self.bat = 0
            self.bwl = 0
            self.ar = 0
            self.wk = 0
            self.avl = 1000
            self.used = 0
            self.listWidget.clear()
            self.listWidget_2.clear()
            self.TeamName.setText("...")
            self.showstatus()
            self.openteam()

        if txt == 'SAVE Team':
            data = ""
            count = self.listWidget_2.count()
            for i in range(count):
                data = data + self.listWidget_2.item(i).text()
                if i < count - 1:
                    data = data + ","
            self.teamsave(self.TeamName.text(), data, self.used)

        if txt == "EVALUATE Team":
            from Evaluate import Ui_evaluate
            self.evaluate = QtWidgets.QWidget()
            self.ui = Ui_evaluate()
            self.ui.setupUi(self.evaluate)
            self.evaluate.show()

        if txt == "Rules":
            from rules import Ui_Rules
            self.rules = QtWidgets.QDialog()
            self.ui = Ui_Rules()
            self.ui.setupUi(self.rules)
            self.rules.show()

        if txt == "Instructions":
            from Instructions import Ui_Instruction
            self.instructions = QtWidgets.QWidget()
            self.ui = Ui_Instruction()
            self.ui.setupUi(self.instructions)
            self.instructions.show()

    def teamsave(self, nm, string, val):

        MainWindow = QtWidgets.QMainWindow()
        if self.bat + self.bwl + self.ar + self.wk != 11:
            self.popup("Insufficient players")
            return

        query = '''INSERT INTO teams (Name, Players, Value) VALUES ('%s','%s','%s')''' % (nm, string, val)

        try:
            import sqlite3
            mycricket = sqlite3.connect('final.db')
            curscricket = mycricket.cursor()
            curscricket.execute(query)
            mycricket.commit()
            self.popup1("Team Saved successfully")

        except:
            self.popup("Error in operation")
            import sqlite3
            mycricket = sqlite3.connect('final.db')
            curscricket = mycricket.cursor()
            mycricket.rollback()

    def openteam(self):

        MainWindow = QtWidgets.QMainWindow()
        import sqlite3
        query = "SELECT Name FROM teams"
        mycricket = sqlite3.connect('final.db')
        curscricket = mycricket.cursor()
        data = curscricket.execute(query)
        teams = []

        for row in data:
            teams.append(row[0])
        team, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Open Team", "Choose a team", teams, 0, False)

        if ok and team:
            self.TeamName.setText(team)
        else:
            return

        query1 = '''SELECT Players, Value FROM teams WHERE Name= '%s' ''' % (team,)
        import sqlite3
        mycricket = sqlite3.connect('final.db')
        curscricket = mycricket.cursor()
        data1 = curscricket.execute(query1)
        row1 = data1.fetchone()

        selected = row1[0].split(',')
        self.listWidget_2.addItems(selected)
        self.used = row1[1]
        self.avl = 1000 - row1[1]
        count = self.listWidget_2.count()

        for i in range(count):

            player = self.listWidget_2.item(i).text()
            query2 = '''SELECT Category FROM stats WHERE Player='%s' ''' % (player,)
            import sqlite3
            mycricket = sqlite3.connect('final.db')
            curscricket = mycricket.cursor()
            data2 = curscricket.execute(query2)
            row2 = data2.fetchone()
            ctgr = row2[0]

            if ctgr == "BAT":
                self.bat += 1

            if ctgr == "BWL":
                self.bwl += 1

            if ctgr == "AR":
                self.ar += 1

            if ctgr == "WK":
                self.wk += 1

        self.showstatus()

    def fillList(self, ctgr):

        if self.TeamName.text() == '...':
            self.popup("Enter name of team")
            return

        self.listWidget.clear()
        query = '''SELECT Player FROM stats WHERE Category= '%s' ''' % (ctgr,)
        import sqlite3
        mycricket = sqlite3.connect('final.db')
        curscricket = mycricket.cursor()
        data = curscricket.execute(query)
        for row in data:
            selected = []
            for i in range(self.listWidget_2.count()):
                selected.append(self.listWidget_2.item(i).text())
            if row[0] not in selected:
                self.listWidget.addItem(row[0])

    def category(self):

        ctgr = ''
        if self.Bat.isChecked() == True:
            ctgr = 'BAT'
        if self.Bow.isChecked() == True:
            ctgr = 'BWL'
        if self.AllRound.isChecked() == True:
            ctgr = 'AR'
        if self.WicketK.isChecked() == True:
            ctgr = 'WK'

        self.fillList(ctgr)

    def criteria(self, ctgr, item):

        msg = ''
        if ctgr == 'BAT' and self.bat >= 5:
            self.popup('Batsmen not more than 5')
            return False

        if ctgr == 'BWL' and self.bwl >= 5:
            self.popup('Bowlers not more than 5')
            return False

        if ctgr == 'AR' and self.ar >= 3:
            self.popup('All Rounders not more than 3')
            return False

        if ctgr == 'WK' and self.wk >= 1:
            self.popup('Wicket Keeper not more than 1')
            return False

        if self.avl <= 0:
            self.popup('You have exhausted your points')
            return False

        if ctgr == 'BAT':
            self.bat += 1
        if ctgr == 'BWL':
            self.bwl += 1
        if ctgr == 'AR':
            self.ar += 1
        if ctgr == 'WK':
            self.wk += 1

        query = '''SELECT Player,Value from stats where Player= '%s' ''' % (item.text(),)
        import sqlite3
        mycricket = sqlite3.connect('final.db')
        curscricket = mycricket.cursor()
        data = curscricket.execute(query)
        row = data.fetchone()
        self.avl = self.avl - int(row[1])
        self.used = self.used + int(row[1])
        return True

    def showstatus(self):

        self.BATS.setText(str(self.bat))
        self.BOWS.setText(str(self.bwl))
        self.ARS.setText(str(self.ar))
        self.WKS.setText(str(self.wk))
        self.ShowPA.setText(str(self.avl))
        self.ShowPU.setText(str(self.used))

    def remove_listwidget(self, item):

        ctgr = ''
        if self.Bat.isChecked() == True:
            ctgr = 'BAT'
        if self.Bow.isChecked() == True:
            ctgr = 'BWL'
        if self.AllRound.isChecked() == True:
            ctgr = 'AR'
        if self.WicketK.isChecked() == True:
            ctgr = 'WK'
        ret = self.criteria(ctgr, item)
        if ret == True:
            self.listWidget.takeItem(self.listWidget.row(item))
            self.listWidget_2.addItem(item.text())
            self.showstatus()

    def popup(self, msg):

        Dialog = QtWidgets.QMessageBox()
        Dialog.setText(msg)
        Dialog.setWindowTitle("Error!")
        ret = Dialog.exec()

    def popup1(self, msg):

        Dialog = QtWidgets.QMessageBox()
        Dialog.setText(msg)
        Dialog.setWindowTitle("Fantasy Cricket League")
        ret = Dialog.exec()

    def remove_listwidget2(self, item):

        self.listWidget_2.takeItem(self.listWidget_2.row(item))
        query = '''SELECT Player, Value, Category FROM stats WHERE Player= '%s' ''' % (item.text(),)
        import sqlite3
        mycricket = sqlite3.connect('final.db')
        curscricket = mycricket.cursor()
        data = curscricket.execute(query)
        row = data.fetchone()
        self.avl = self.avl + int(row[1])
        self.used = self.used - int(row[1])
        ctgr = row[2]

        if ctgr == "BAT":
            self.bat -= 1
            if self.Bat.isChecked() == True:
                self.listWidget.addItem(item.text())

        if ctgr == "BWL":
            self.bwl -= 1
            if self.Bow.isChecked() == True:
                self.listWidget.addItem(item.text())

        if ctgr == "AR":
            self.ar -= 1
            if self.AllRound.isChecked() == True:
                self.listWidget.addItem(item.text())

        if ctgr == "WK":
            self.wk -= 1
            if self.WicketK.isChecked() == True:
                self.listWidget.addItem(item.text())

        self.showstatus()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
